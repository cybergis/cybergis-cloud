# TODO: Remove EFS from network stack and replace with EBS volumes in ParallelCluster configuration.
AWSTemplateFormatVersion: 2010-09-09
Conditions:
  CreateInternetGateway: !Equals
    - !Ref InternetGatewayId
    - ''
  CreateVpc: !Equals
    - !Ref VpcId
    - ''
  ExistingInternetGateway: !Not
    - !Equals
      - !Ref InternetGatewayId
      - ''
Description: CyberGIS Network
Outputs:
  VpcId:
    Value: !If
      - CreateVpc
      - !Ref Vpc
      - !Ref VpcId
  InternetGatewayId:
    Value: !If
      - CreateInternetGateway
      - !Ref InternetGateway
      - !Ref InternetGatewayId
  PublicSubnetId:
    Value: !Ref Public
  DefaultSecurityGroup:
    Value: !GetAtt Vpc.DefaultSecurityGroup
  FileSystemId:
    Value: !Ref FileSystem
Parameters:
  AvailabilityZone:
    Description: (Optional) The zone in which you want to create your subnet(s)
    Type: String
  InternetGatewayId:
    Description: >-
      (Optional) The id of the gateway (will be created if not specified).
      Required if VpcId is specified.
    Type: String
    Default: ''
  PublicCIDR:
    AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    Description: The CIDR of the Public
    Default: 10.0.0.0/16
    Type: String
  VpcId:
    Description: >-
      (Optional) The VPC id to create subnets in. (will be created if not
      specified)
    Default: ''
    Type: String
  VpcCIDR:
    Description: >-
      (Optional) The CIDR for the VPC if it will be created (only valid if VpcId
      is left blank)
    Default: 10.0.0.0/16
    Type: String
  FileSystemName:
    Description: The name of the file system.
    Type: String
    Default: 'fs'
Resources:
  Vpc:
    Condition: CreateVpc
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
  DefaultRouteDependsOnPublic:
    Condition: CreateInternetGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  DefaultRouteNoDependsOnPublic:
    Condition: ExistingInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  InternetGateway:
    Condition: CreateInternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:internet-gateway'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
    Type: 'AWS::EC2::InternetGateway'
  Public:
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'parallelcluster:public-subnet'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::Subnet'
  RouteAssociationPublic:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:route-table-public'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::RouteTable'
  VPCGatewayAttachment:
    Condition: CreateInternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::VPCGatewayAttachment'
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      AvailabilityZoneName: !Ref AvailabilityZone
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Ref FileSystemName
      PerformanceMode: generalPurpose
      ThroughputMode: elastic
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref Public
      SecurityGroups:
      - !GetAtt Vpc.DefaultSecurityGroup
  NotebookSGI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 8888
      GroupId: !GetAtt Vpc.DefaultSecurityGroup
      IpProtocol: tcp
      ToPort: 8888
