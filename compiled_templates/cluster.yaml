AWSTemplateFormatVersion: 2010-09-09


Conditions:
  CreateInternetGateway: !Equals
    - !Ref InternetGatewayId
    - ''
  
  CreateVpc: !Equals
    - !Ref VpcId
    - ''
  
  ExistingInternetGateway: !Not
    - !Equals
      - !Ref InternetGatewayId
      - ''


Description: CyberGIS Cloud


Outputs:
  VpcId:
    Value: !If
      - CreateVpc
      - !Ref Vpc
      - !Ref VpcId
  
  InternetGatewayId:
    Value: !If
      - CreateInternetGateway
      - !Ref InternetGateway
      - !Ref InternetGatewayId
  
  PublicSubnetId:
    Value: !Ref Public
  
  DefaultSecurityGroup:
    Value: !GetAtt Vpc.DefaultSecurityGroup


Parameters:
  AvailabilityZone:
    Description: (Optional) The zone in which you want to create your subnet(s)
    Type: String
  
  InternetGatewayId:
    Description: >-
      (Optional) The id of the gateway (will be created if not specified).
      Required if VpcId is specified.
    Type: String
    Default: ''
  
  PublicCIDR:
    AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(1[6-9]|2[0-9]|3[0-2])$'
    Description: The CIDR of the Public
    Default: 10.0.0.0/16
    Type: String
  
  VpcId:
    Description: >-
      (Optional) The VPC id to create subnets in. (will be created if not
      specified)
    Default: ''
    Type: String
  
  VpcCIDR:
    Description: >-
      (Optional) The CIDR for the VPC if it will be created (only valid if VpcId
      is left blank)
    Default: 10.0.0.0/16
    Type: String
  
  HeadNodeInstanceType:
    Description: >-
      The instance type of the head node in the cluster.
    Default: t2.micro
    Type: String

  HeadNodeOnStartScriptURL:
    Description: >-
      The URL of the script to run when the head node starts.
    Default: https://raw.githubusercontent.com/anuj-p/CyberGIS-cluster-scripts/main/head_init.sh
    Type: String

  HeadNodeOnConfiguredScriptURL:
    Description: >-
      The URL of the script to run when the head node is configured.
    Default: https://raw.githubusercontent.com/anuj-p/CyberGIS-cluster-scripts/main/head_start.sh
    Type: String
  
  ComputeNodeInstanceType:
    Description: >-
      The instance type of the compute nodes in the cluster.
    Default: t2.micro
    Type: String

  ComputeNodeCount:
    Description: >-
      The number of compute nodes in the cluster.
    Default: 1
    Type: Number
  
  ComputeNodeOnConfiguredScriptURL:
    Description: >-
      The URL of the script to run when the compute node is configured.
    Default: https://raw.githubusercontent.com/anuj-p/CyberGIS-cluster-scripts/main/slave_init.sh
    Type: String

  SharedStorageSize:
    Description: >-
      The size (GB) of the shared volume in the cluster.
    Default: 10
    Type: Number

Resources:
  Vpc:
    Condition: CreateVpc
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
  
  DefaultRouteDependsOnPublic:
    Condition: CreateInternetGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  
  DefaultRouteNoDependsOnPublic:
    Condition: ExistingInternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !If
        - CreateInternetGateway
        - !Ref InternetGateway
        - !Ref InternetGatewayId
      RouteTableId: !Ref RouteTablePublic
    Type: 'AWS::EC2::Route'
  
  InternetGateway:
    Condition: CreateInternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:internet-gateway'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
    Type: 'AWS::EC2::InternetGateway'
  
  Public:
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'parallelcluster:public-subnet'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::Subnet'
  
  RouteAssociationPublic:
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref Public
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  
  RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value: 'parallelcluster:route-table-public'
        - Key: Stack
          Value: !Ref 'AWS::StackId'
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::RouteTable'
  
  VPCGatewayAttachment:
    Condition: CreateInternetGateway
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !If
        - CreateVpc
        - !Ref Vpc
        - !Ref VpcId
    Type: 'AWS::EC2::VPCGatewayAttachment'
  
  NotebookSGI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 8888
      GroupId: !GetAtt Vpc.DefaultSecurityGroup
      IpProtocol: tcp
      ToPort: 8888

  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: CyberGIS_KeyPair

  HeadNodePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - 'kms:GenerateDataKeyWithoutPlaintext'
          - 'kms:CreateGrant'
          Resource: "*"

  SharedVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Encrypted: true
      Size: !Ref SharedStorageSize
  
  ParallelClusterProviderPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - 'iam:AttachRolePolicy'
          - 'iam:DetachRolePolicy'
          Resource: "*"

  ParallelClusterProvider:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AdditionalIamPolicies: !Ref ParallelClusterProviderPolicy
      TemplateURL: !Sub
        - https://${AWS::Region}-aws-parallelcluster.s3.${AWS::Region}.${AWS::URLSuffix}/parallelcluster/${Version}/templates/custom_resource/cluster.yaml
        - { Version: 3.7.0 }

  Cluster:
    Type: Custom::Cluster
    Properties:
      ServiceToken: !GetAtt [ ParallelClusterProvider , Outputs.ServiceToken ]
      ClusterName: !Sub 'c-${AWS::StackName}'
      ClusterConfiguration:
        Region: !Ref "AWS::Region"
        Image:
          Os: ubuntu2004
        HeadNode:
          InstanceType: !Ref HeadNodeInstanceType
          Networking:
            SubnetId: !Ref Public
            AdditionalSecurityGroups: 
              - !GetAtt Vpc.DefaultSecurityGroup
          Ssh:
            KeyName: !Ref KeyPair
          LocalStorage:
            RootVolume:
              Encrypted: true
          Iam:
            AdditionalIamPolicies:
              - Policy: !Ref HeadNodePolicy
          CustomActions:
            OnNodeStart:
              Script: !Ref HeadNodeOnStartScriptURL
        Scheduling:
          Scheduler: slurm
          SlurmQueues:
          - Name: queue0
            ComputeSettings:
              LocalStorage:
                RootVolume:
                  Encrypted: true
            ComputeResources:
            - Name: queue0-cr0
              Instances:
              - InstanceType: !Ref ComputeNodeInstanceType
              MinCount: !Ref ComputeNodeCount
              MaxCount: !Ref ComputeNodeCount
            Networking:
              SubnetIds:
              - !Ref Public
              AdditionalSecurityGroups: 
              - !GetAtt Vpc.DefaultSecurityGroup
            CustomActions:
              OnNodeConfigured:
                Script: !Ref ComputeNodeOnConfiguredScriptURL
        SharedStorage:
        - MountDir: /home/ubuntu/compute_shared
          Name: cybergis-shared-volume
          StorageType: Ebs
          EbsSettings:
            VolumeId: !Ref SharedVolume
